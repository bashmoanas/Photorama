//
//  FlickrAPI.swift
//  Photorama
//
//  Created by Anas Bashandy on 02/03/2023.
//

import Foundation

/// Represent the response from the Flickr server.
struct FlickrResponse: Codable {
    let photosInfo: FlickrPhotosResponse
    
    /// Map the key name returned from the API to a convenient property name.
    enum CodingKeys: String, CodingKey {
        case photosInfo = "photos"
    }
}

/// An intermediary struct to represent the response from Flickr service.
struct FlickrPhotosResponse: Codable {
    let photos: [Photo]
    
    /// Map the key name returned from the API to a convenient property name.
    enum CodingKeys: String, CodingKey {
        case photos = "photo"
    }
}

/// The end point to hit on the Flickr Server.
enum EndPoint: String {
    
    /// The endpoint to get interesting photos.
    case interestingPhotos = "flickr.interestingness.getList"
}

/// Resposible for knowing and handling all Flickr-related information.
///
/// This includes how to generate the URLs that the Flickr API expects as well as knowing the format of incoming JSON and how to parse that JSON into the relevant model objects.
struct FlickrAPI {
    
    // MARK: - Helper Properties
    
    /// The base url string for all web services requests.
    private static let baseURLString = "https://api.flickr.com/services/rest"
    
    /// The token generated by Flickr to identify this app and authenticate it with the web service.
    private static let apiKey = "e719f78b282f9527b3c2d1f80fcc75d1"
    
    
    // MARK: - Properties
    
    /// The URL for the `interstingPhotos` endpoint.
    static var interestingPhotosURL: URL {
        return flickrURL(endPoint: .interestingPhotos,
                         parameters: ["extras": "url_z,date_taken"])
    }
    
    // MARK: - Helper Methods
    
    /// Builds the URL for a specific `EndPoint`.
    ///
    /// This method use the `URLComponent` object which is capable of constructing a correct URL out of the base URL and dictionary parameters.
    ///
    /// - Parameters:
    ///   - endPoint: The end point to hit from the `Endpoint` enum.
    ///   - parameters: An optional dictionary of query item parameters associated with the request. There is some default parameters common to all request will be used inside this method. In case there is additional parameters associated with a specific request, you can pass these additional parameters to this method.
    /// - Returns: The full working URL for a specific endpoint.
    private static func flickrURL(endPoint: EndPoint, parameters: [String: String]?) -> URL {
        var components = URLComponents(string: baseURLString)!
        var queryItems = [URLQueryItem]()
        
        let baseParams = [
            "method": endPoint.rawValue,
            "format": "json",
            "nojsoncallback": "1",
            "api_key": apiKey
        ]
        
        for (key, value) in baseParams {
            let item = URLQueryItem(name: key, value: value)
            queryItems.append(item)
        }
        
        if let additionalParams = parameters {
            for (key, value) in additionalParams {
                let item = URLQueryItem(name: key, value: value)
                queryItems.append(item)
            }
        }
        
        components.queryItems = queryItems
        
        return components.url!
    }
    
    
    // MARK: - Actions
    
    /// Parse the data returned from FlickrAPI to an instance of `FlickrResponse`.
    ///
    /// If the incoming data is structured JSON in the expected format, then it will be parsed successfully, otherwise an error will be thrown.
    ///
    /// - Note: [For the date formatter reference ](https://developer.apple.com/library/archive/qa/qa1480/_index.html)
    /// - Parameter data: The data returned from the web service.
    /// - Returns: An array of photos information.
    static func photos(fromJSON data: Data) throws -> [Photo] {
        do {
            let decoder = JSONDecoder()
            
            // Custom decode the date
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
            dateFormatter.locale = Locale(identifier: "en_US_POSIX")
            dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)
            decoder.dateDecodingStrategy = .formatted(dateFormatter)
            
            let flickrResponse = try decoder.decode(FlickrResponse.self, from: data)
            let photos = flickrResponse.photosInfo.photos.filter { $0.remoteURL != nil }
            return photos
        } catch {
            throw error
        }
    }
    
}
